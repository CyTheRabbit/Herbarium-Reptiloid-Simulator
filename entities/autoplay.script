local flow = require "m.flow"
local wait = flow
local monarch = require "monarch.monarch"
local global = require "global"
local lang = require "lang"

local hash = hash

local function send_ship_at(pos, props)
	local message = { destination = pos, properties = props }
	msg.post("game:/port", "spawn_ship", message)
end

local function send_ship_to(url, props)
	send_ship_at(go.get_world_position(url), props)
end

local function say(text)
	monarch.show(hash "dialogue", nil, { text = text, time = time })
	wait.delay(0.25)
end

local function wave(self, planet_pool, props, count, delay)
	self.parallel = flow.parallel(function()
		for i = 1, count do
			wait.delay(delay)

			local planet = planet_pool[math.random(#planet_pool)]
			send_ship_to(planet, props)
		end
	end)

	for i = 1, count do
		wait.until_message(hash "mission_done", hash "hit")
	end
end

local function pour_off(self, count)
	for i = 1, count do
		global.max_space = global.max_space + 1
		global.space = global.space + 1
		msg.post("game:/manager", "update_counter")
		wait.delay(0.0625)
	end
end

local function tutorial(self)
	msg.post("game:/tools", "release_input_focus")
	wait.delay(0.5)

	send_ship_to(msg.url "game:/planet1", { speed = 15 })

	wait.delay(3)
	print(sys.get_sys_info().device_language)
	say(lang.tutorial.call_to_action[lang.current()])

	msg.post("game:/tools", "acquire_input_focus")

	local message_id = flow.until_message(hash "flight_done", hash "hit")

	local reaction
	if message_id == hash "flight_done" then
		wait.delay(1)
		say(lang.tutorial.good_reaction[lang.current()])
	elseif message_id == hash "hit" then
		wait.delay(0.25)
		say(lang.tutorial.bad_reaction[lang.current()])
	end
end

local function session(self)
	math.randomseed(os.clock())

	local data = monarch.data(hash "game")
	local do_tutorial = data and data.tutorial

	if do_tutorial then
		tutorial(self)
	end

	local planet_pool = {
		msg.url "game:/planet2",
		msg.url "game:/planet3",
		msg.url "game:/planet4",
		msg.url "game:/planet5",
	}

	wave(self, planet_pool, nil, 6, 8)

	if do_tutorial then
		wait.until_message(hash "mission_done", hash "hit")
	end

	say(lang.wave_1_end[lang.current()])
	pour_off(self, 30)

	say(lang.radar_hint[lang.current()])

	table.insert(planet_pool, msg.url "game:/planet1")
	table.insert(planet_pool, msg.url "game:/planet6")
	table.insert(planet_pool, msg.url "game:/planet7")

	wave(self, planet_pool, nil, 10, 10)

	say(lang.wave_2_end[lang.current()])
	pour_off(self, 20)

	wave(self, planet_pool, { speed = 30 }, 8, 7)

	say(lang.wave_3_end[lang.current()])
	pour_off(self, 50)

	table.insert(planet_pool, "game:/planet8")
	table.insert(planet_pool, "game:/planet")
	wave(self, planet_pool, { speed = 30 }, 8, 8)

	monarch.show(hash "gameover", nil, { win = true })

end

function init(self)
	sound.play "loader:/sound#space"
	self.timers = {}

	global.stress = 0
	global.space = 0

	global.ship_properties.speed = 15
	self.flow = flow.start(function() session(self) end)
end

function final(self)
	sound.stop "loader:/sound#space"
	for handle in pairs(self.timers) do
		timer.cancel(handle)
	end
	flow.stop(self.parallel)
	flow.stop(self.flow)
end

function update(self, dt)
	flow.update(dt)
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
